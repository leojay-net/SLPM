import { OrchestratorEvent } from '@/lib/types';
import { RealAtomiqSwapClient } from '@/integrations/swaps/atomiq';
import { ENV } from '@/config/env';

export async function stepSwapFromLightning(
    lightningAmount: number,
    targetStrkAmount: number,
    destinationWallet: string,
    onEvent: (e: OrchestratorEvent) => void
) {
    console.log('‚ö° SLPM SwapFromLN: Starting Lightning BTC ‚Üí STRK swap');
    console.log('‚ö° SLPM SwapFromLN: Parameters:', {
        lightningAmount,
        targetStrkAmount,
        destination: destinationWallet.slice(0, 10) + '...',
        network: ENV.NETWORK
    });

    try {
        onEvent({
            type: 'mix:progress',
            message: `Converting ${lightningAmount} sats Lightning BTC back to STRK...`,
            progress: 75
        });

        console.log('üèóÔ∏è SLPM SwapFromLN: Initializing Atomiq client...');
        const atomiq = new RealAtomiqSwapClient(ENV.NETWORK);

        // Use the working swapLightningToStrkInteractive method for automated mixer flow
        console.log('üí∞ SLPM SwapFromLN: Executing automated Lightning ‚Üí STRK swap...');
        const swapResult = await atomiq.swapLightningToStrkInteractive(targetStrkAmount, destinationWallet);

        console.log('‚ö° SLPM SwapFromLN: Swap result:', {
            success: swapResult.success,
            txId: swapResult.txId,
            amount: swapResult.amount,
            route: swapResult.route,
            error: swapResult.error
        });

        // Verify swap succeeded
        if (!swapResult.success) {
            throw new Error(`Lightning ‚Üí STRK swap failed: ${swapResult.error || 'Unknown error'}`);
        }

        onEvent({
            type: 'mix:progress',
            message: `Lightning successfully converted to ${swapResult.amount} STRK`,
            progress: 80
        });

        console.log('‚úÖ SLPM SwapFromLN: Lightning BTC successfully swapped back to STRK!');
        onEvent({
            type: 'mix:progress',
            message: 'Lightning BTC successfully converted back to STRK',
            progress: 85
        });

        return {
            executionId: swapResult.txId || `swap_${Date.now()}`,
            starknetTxId: swapResult.txId,
            amountIn: lightningAmount,
            amountOut: swapResult.amount,
            fee: 0, // Fee included in swap result
            destination: destinationWallet,
            lightningInvoice: 'N/A' // Generated by Atomiq internally
        };

    } catch (error) {
        console.error('‚ùå SLPM SwapFromLN: Step failed:', error);
        console.error('üîç SLPM SwapFromLN: Error details:', {
            message: error instanceof Error ? error.message : 'Unknown error',
            stack: error instanceof Error ? error.stack : undefined,
            context: {
                lightningAmount,
                targetStrkAmount,
                destination: destinationWallet.slice(0, 10) + '...',
                network: ENV.NETWORK
            }
        });

        onEvent({
            type: 'mix:error',
            message: error instanceof Error ? error.message : 'Unknown reverse swap error'
        });
        throw error;
    }
}
